FUNCTION ZFM_BM_CS_CCODE .
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_DATA) TYPE  ZST_BM_V_T001_ADDRESS
*"  EXPORTING
*"     REFERENCE(ET_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------
  DATA:
    LS_T001     TYPE  T001,
    LV_ADDR_NUM TYPE ADRC-ADDRNUMBER.
  CLEAR:
   GT_RETURN,
   ADTEL[],
   ADFAX[],
   ADSMTP[]
   .
  GS_DATA = I_DATA.
  SELECT SINGLE
    *
      FROM T001
      INTO CORRESPONDING FIELDS OF  LS_T001
      WHERE BUKRS = I_DATA-BUKRS.
  IF SY-SUBRC IS INITIAL.
    CLEAR
    G_MODE.
    G_MODE = '1'.
    PERFORM CHECK .
    ET_RETURN = GT_RETURN.
    IF ET_RETURN IS NOT INITIAL .
      RETURN.
    ENDIF.
    CASE  LS_T001-ADRNR.
      WHEN '' .
        PERFORM  INSERT_ADDR CHANGING LV_ADDR_NUM.

        LS_T001-ADRNR = LV_ADDR_NUM.
      WHEN OTHERS.
        PERFORM UPDATE_ADDR CHANGING LS_T001.
    ENDCASE.
    LS_T001-BUTXT = GS_DATA-BUTXT.
    LS_T001-ORT01 = GS_DATA-ORT01.
    LS_T001-LAND1 = GS_DATA-LAND1.
    LS_T001-WAERS = GS_DATA-WAERS.
    LS_T001-SPRAS = GS_DATA-SPRAS.
    UPDATE  T001 FROM LS_T001.
  ELSE.
    CLEAR
       G_MODE.
    G_MODE = '2'.
    PERFORM CHECK.

    ET_RETURN = GT_RETURN.
    IF ET_RETURN IS NOT INITIAL .
      RETURN.
    ENDIF.
    PERFORM  INSERT_ADDR CHANGING LV_ADDR_NUM.
    LS_T001-BUKRS = GS_DATA-BUKRS.
    LS_T001-BUTXT = GS_DATA-BUTXT.
    LS_T001-ORT01 = GS_DATA-ORT01.
    LS_T001-LAND1 = GS_DATA-LAND1.
    LS_T001-WAERS = GS_DATA-WAERS.
    LS_T001-SPRAS = GS_DATA-SPRAS.
    LS_T001-ADRNR = LV_ADDR_NUM.
    INSERT T001 FROM LS_T001.
  ENDIF.
ENDFUNCTION.
FORM INSERT_ADDR CHANGING LV_ADDR_NUM  TYPE ADRC-ADDRNUMBER.

  DATA:

    LV_ADDR1_DATA TYPE ADDR1_DATA,

    LV_ADDR_REF   TYPE ADDR_REF,

    LV_ADDR_DATA  TYPE ADDR1_DATA.

  LV_ADDR1_DATA-TITLE = GS_DATA-TITLE_MEDI.
  LV_ADDR1_DATA-NAME1 = GS_DATA-NAME1.
  LV_ADDR1_DATA-NAME2 = GS_DATA-NAME2.
  LV_ADDR1_DATA-NAME3 = GS_DATA-NAME3.
  LV_ADDR1_DATA-NAME4 = GS_DATA-NAME4.
  LV_ADDR1_DATA-SORT1 = GS_DATA-SORT1.
  LV_ADDR1_DATA-SORT2 = GS_DATA-SORT2.
  LV_ADDR1_DATA-STR_SUPPL1 = GS_DATA-STR_SUPPL1.
  LV_ADDR1_DATA-STREET = GS_DATA-STREET.
  LV_ADDR1_DATA-POST_CODE1 = GS_DATA-POST_CODE1.
  LV_ADDR1_DATA-CITY1 = GS_DATA-CITY1.
  LV_ADDR1_DATA-COUNTRY = GS_DATA-COUNTRY.
  LV_ADDR1_DATA-REGION = GS_DATA-REGION.
  LV_ADDR1_DATA-TIME_ZONE = GS_DATA-TIME_ZONE.
  LV_ADDR1_DATA-PO_BOX = GS_DATA-PO_BOX.
  LV_ADDR1_DATA-POST_CODE2 = GS_DATA-POST_CODE2.
  LV_ADDR1_DATA-POST_CODE3 = GS_DATA-POST_CODE3.
  LV_ADDR1_DATA-LANGU = GS_DATA-LANGU.
  LV_ADDR1_DATA-DEFLT_COMM = GS_DATA-DEFLT_COMM.
  LV_ADDR1_DATA-REMARK = GS_DATA-REMARK.



  LV_ADDR_REF-ADDR_GROUP = 'CA01'.

*wa_addr_ref-owner = 'X'.

  LV_ADDR_REF-APPL_TABLE = 'ADRC'.

  LV_ADDR_REF-APPL_FIELD = 'ADDRNUMBER'.

  CALL FUNCTION 'ADDR_INSERT'
    EXPORTING
      ADDRESS_DATA    = LV_ADDR1_DATA
      ADDRESS_GROUP   = 'CA01'
      ADDRESS_HANDLE  = 'Address '
*     DATE_FROM       = '00010101'
*     LANGUAGE        = SY-LANGU
*     CHECK_EMPTY_ADDRESS = 'X'
*     CHECK_ADDRESS   = 'X'
    IMPORTING
      ADDRESS_DATA    = LV_ADDR_DATA
*     RETURNCODE      =
* TABLES
*     ERROR_TABLE     =
    EXCEPTIONS
      ADDRESS_EXISTS  = 1
      PARAMETER_ERROR = 2
      INTERNAL_ERROR  = 3
      OTHERS          = 4.

  IF SY-SUBRC <> 0.

* Implement suitable error handling here

  ENDIF.


  PERFORM ADD_TEL CHANGING LV_ADDR_NUM.
  PERFORM ADD_FAX CHANGING LV_ADDR_NUM.
  PERFORM ADD_SMTP CHANGING LV_ADDR_NUM.
  CALL FUNCTION 'ADDR_NUMBER_GET'
    EXPORTING
      ADDRESS_HANDLE           = 'Address '
      ADDRESS_REFERENCE        = LV_ADDR_REF
      PERSONAL_ADDRESS         = ' '
*     NUMBERRANGE_NUMBER       = '01'
*     E071K_WA                 =
*     GENERATE_TRANSPORT_ENTRIES =
*     OWNER                    = 'X'
*     TABLE_NAME               =
*     FIELD_NAME               =
*     OBJKEY                   =
    IMPORTING
      ADDRESS_NUMBER           = LV_ADDR_NUM
*     RETURNCODE_NUMBERRANGE   =
* TABLES
*     E071K_TAB                =
    EXCEPTIONS
      ADDRESS_HANDLE_NOT_EXIST = 1
      INTERNAL_ERROR           = 2
      PARAMETER_ERROR          = 3
      OTHERS                   = 4.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.


  PERFORM BEFORE_SAVE_T001.


  CALL FUNCTION 'ADDR_MEMORY_SAVE'
    EXPORTING
      EXECUTE_IN_UPDATE_TASK = ' '
    EXCEPTIONS
      ADDRESS_NUMBER_MISSING = 1
      PERSON_NUMBER_MISSING  = 2
      INTERNAL_ERROR         = 3
      DATABASE_ERROR         = 4
      REFERENCE_MISSING      = 5
      OTHERS                 = 6.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.

  COMMIT WORK AND WAIT.

  PERFORM AFTER_SAVE_T001.

  CALL FUNCTION 'ADDR_MEMORY_CLEAR'
    EXPORTING
      FORCE              = ' '
    EXCEPTIONS
      UNSAVED_DATA_EXIST = 1
      INTERNAL_ERROR     = 2
      OTHERS             = 3.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.
ENDFORM.

FORM UPDATE_ADDR CHANGING LPS_T001  TYPE T001.
  DATA:
    LV_ADDR_NUM       TYPE ADRC-ADDRNUMBER,
    LV_ADDR1_DATA     TYPE ADDR1_DATA,
    LV_RETURNCODE     TYPE AD_RETCODE,
    LS_ADDR1_SEL      LIKE  ADDR1_SEL,
    LT_ADDR_ERROR     TYPE TABLE OF ADDR_ERROR,
    LV_ADDR1_OLD_VERS TYPE TABLE OF ADDR_VERS,
    LS_AD1_FLAGS      LIKE   AD1_FLAGS,
    LV_ADDR_GET       LIKE  ADDR1_VAL.

  LV_ADDR_NUM = LPS_T001-ADRNR.

  LS_ADDR1_SEL-ADDRNUMBER = LV_ADDR_NUM.

  CALL FUNCTION 'ADDR_GET'
    EXPORTING
      ADDRESS_SELECTION       = LS_ADDR1_SEL
    IMPORTING
      ADDRESS_VALUE           = LV_ADDR_GET
      ADDRESS_ADDITIONAL_INFO = LS_AD1_FLAGS            "*1181i
*     returncode              = returncode              "*963d
      RETURNCODE              = LV_RETURNCODE           "*963i
    TABLES
      ERROR_TABLE             = E_TABLE
      VERSIONS                = LV_ADDR1_OLD_VERS
    EXCEPTIONS
      PARAMETER_ERROR         = 1
      ADDRESS_NOT_EXIST       = 2
      VERSION_NOT_EXIST       = 3
      INTERNAL_ERROR          = 4
      OTHERS                  = 5.
  DATA:
    LS_T001 TYPE T001,
    I_DATA  TYPE  ZST_BM_V_T001_ADDRESS.

  MOVE-CORRESPONDING LV_ADDR_GET TO LV_ADDR1_DATA.

  I_DATA = GS_DATA.
  SELECT SINGLE
    BUKRS
      FROM T001
      INTO CORRESPONDING FIELDS OF  LS_T001
      WHERE BUKRS = GS_DATA-BUKRS.

  IF SY-SUBRC IS INITIAL .

    LV_ADDR1_DATA-TITLE = GS_DATA-TITLE_MEDI .
    LV_ADDR1_DATA-NAME1 = GS_DATA-NAME1 .
    LV_ADDR1_DATA-NAME2 = GS_DATA-NAME2 .
    LV_ADDR1_DATA-NAME3 = GS_DATA-NAME3 .
    LV_ADDR1_DATA-NAME4 = GS_DATA-NAME4 .
    LV_ADDR1_DATA-SORT1 = GS_DATA-SORT1 .
    LV_ADDR1_DATA-SORT2 = GS_DATA-SORT2 .
    LV_ADDR1_DATA-STR_SUPPL1 = GS_DATA-STR_SUPPL1 .
    LV_ADDR1_DATA-STREET = GS_DATA-STREET .
    LV_ADDR1_DATA-POST_CODE1 = GS_DATA-POST_CODE1 .
    LV_ADDR1_DATA-CITY1 = GS_DATA-CITY1 .
    LV_ADDR1_DATA-COUNTRY = GS_DATA-COUNTRY .
    LV_ADDR1_DATA-REGION = GS_DATA-REGION .
    LV_ADDR1_DATA-TIME_ZONE = GS_DATA-TIME_ZONE .
    LV_ADDR1_DATA-PO_BOX = GS_DATA-PO_BOX .
    LV_ADDR1_DATA-POST_CODE2 = GS_DATA-POST_CODE2 .
    LV_ADDR1_DATA-POST_CODE3 = GS_DATA-POST_CODE3 .
    LV_ADDR1_DATA-LANGU = GS_DATA-LANGU .
    LV_ADDR1_DATA-DEFLT_COMM = GS_DATA-DEFLT_COMM .
    LV_ADDR1_DATA-REMARK = GS_DATA-REMARK .
  ENDIF.

  CALL FUNCTION 'ADDR_UPDATE'
    EXPORTING
      ADDRESS_DATA      = LV_ADDR1_DATA
      ADDRESS_NUMBER    = LV_ADDR_NUM
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
*     NATION            = ' '
*     CHECK_EMPTY_ADDRESS        = 'X'
*     CHECK_ADDRESS     = 'X'
*     CHECK_OTHER_VERSIONS       = 'X'
*     BLK_EXCPT         =
    IMPORTING
*     ADDRESS_DATA      =
      RETURNCODE        = LV_RETURNCODE
*     DATA_HAS_CHANGED  =
    TABLES
      ERROR_TABLE       = LT_ADDR_ERROR
    EXCEPTIONS
      ADDRESS_NOT_EXIST = 1
      PARAMETER_ERROR   = 2
      VERSION_NOT_EXIST = 3
      INTERNAL_ERROR    = 4
      ADDRESS_BLOCKED   = 5
      OTHERS            = 6.
  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.

    PERFORM ADD_TEL CHANGING LV_ADDR_NUM.
    PERFORM ADD_FAX CHANGING LV_ADDR_NUM.
    PERFORM ADD_SMTP CHANGING LV_ADDR_NUM.

  PERFORM BEFORE_SAVE_T001.
  CALL FUNCTION 'ADDR_MEMORY_SAVE'
    EXPORTING
      EXECUTE_IN_UPDATE_TASK = ' '
    EXCEPTIONS
      ADDRESS_NUMBER_MISSING = 1
      PERSON_NUMBER_MISSING  = 2
      INTERNAL_ERROR         = 3
      DATABASE_ERROR         = 4
      REFERENCE_MISSING      = 5
      OTHERS                 = 6.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.
  PERFORM AFTER_SAVE_T001.

  CALL FUNCTION 'ADDR_MEMORY_CLEAR'
    EXPORTING
      FORCE              = ' '
    EXCEPTIONS
      UNSAVED_DATA_EXIST = 1
      INTERNAL_ERROR     = 2
      OTHERS             = 3.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.

ENDFORM.

FORM ADD_TEL CHANGING LV_ADDR_NUM TYPE ADRC-ADDRNUMBER .
  DATA:
    LV_TABLE  LIKE SZAD_FIELD-TABLE_TYPE,
    LV_INDEX  TYPE INT4,
    LV_HANDLE TYPE SZAD_FIELD-HANDLE.
  DATA: LV_RETURNCODE TYPE AD_RETCODE.
*    LV_UPDATEFLAG     LIKE  SZAD_FIELD-UPDATEFLAG,
*    LV_ADDR1_COMPLETE TYPE  SZADR_ADDR1_COMPLETE.
*
*  MOVE-CORRESPONDING ADTEL_WA-ADTEL TO ADTEL.
*  IF LV_UPDATEFLAG = G_INSERT.                               "*188i
*    MOVE LV_UPDATEFLAG TO ADTEL-UPDATEFLAG.                  "*188i 182d
*  ENDIF.                                                   "*188i
*  READ TABLE LV_ADDR1_COMPLETE-ADRT_TAB ASSIGNING FIELD-SYMBOL(<LS_ADRT_LINE>) WITH KEY  "*2110i+
*                                      ADCOMREM-COMM_TYPE = G_COMM_TEL
*                                      ADCOMREM-CONSNUMBER = ADTEL_WA-ADTEL-CONSNUMBER.
*  IF SY-SUBRC IS INITIAL.
*    ADTEL-REMARK = <LS_ADRT_LINE>-ADCOMREM-REMARK.
*  ENDIF.                                                "*2110i-
*  APPEND ADTEL.
  SELECT *
    FROM ADR2
    INTO TABLE @DATA(LT_ADR2)
    WHERE ADDRNUMBER = @LV_ADDR_NUM.
  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADTEL-CONSNUMBER = LV_INDEX.
  ENDIF.

  ADTEL-TEL_NUMBER = GS_DATA-TEL_NUMBER.
  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  ADTEL-COUNTRY    = GS_DATA-COUNTRY.
  ADTEL-FLGDEFAULT = 'X'.
  ADTEL-HOME_FLAG = 'X'.
  ADTEL-R3_USER    = '1'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR2 TRANSPORTING NO FIELDS
      WITH KEY ADDRNUMBER = LV_ADDR_NUM
               R3_USER    = '1'.
    IF SY-SUBRC IS INITIAL.
      ADTEL-UPDATEFLAG = 'U'.
      IF GS_DATA-TEL_NUMBER IS INITIAL.
        ADTEL-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-TEL_NUMBER IS NOT INITIAL.
      ADTEL-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-TEL_NUMBER IS NOT INITIAL.
    ADTEL-UPDATEFLAG = 'I'.
  ENDIF.

*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADTEL.
  SELECT *
     FROM ADR2
     INTO TABLE @LT_ADR2
     WHERE ADDRNUMBER = @LV_ADDR_NUM.
  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADTEL-CONSNUMBER = LV_INDEX.
  ENDIF.
  ADTEL-TEL_NUMBER = GS_DATA-MOB_NUMBER.
  ADTEL-TEL_EXTENS = GS_DATA-MOB_NUMBER.
  ADTEL-COUNTRY    = GS_DATA-COUNTRY.
  ADTEL-FLGDEFAULT = ''.
  ADTEL-HOME_FLAG = ''.
  ADTEL-R3_USER    = '3'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR2 TRANSPORTING NO FIELDS
      WITH KEY ADDRNUMBER = LV_ADDR_NUM
               R3_USER    = '3'.
    IF SY-SUBRC IS INITIAL.
      ADTEL-UPDATEFLAG = 'U'.
      IF GS_DATA-TEL_NUMBER IS INITIAL.
        ADTEL-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-MOB_NUMBER IS NOT INITIAL.
      ADTEL-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-MOB_NUMBER IS NOT INITIAL.
    ADTEL-UPDATEFLAG = 'I'.
    LV_HANDLE = 'Address'.
  ENDIF.
*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADTEL.

  LV_TABLE = 'ADTEL'.
  CALL FUNCTION 'ADDR_COMM_MAINTAIN'
    EXPORTING
      ADDRESS_NUMBER    = LV_ADDR_NUM
      ADDRESS_HANDLE    = LV_HANDLE
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
      TABLE_TYPE        = LV_TABLE
*     SUBSTITUTE_ALL_COMM_DATA             = ' '
*     ACCEPT_TELNR_CALL = ' '
*     CONSIDER_CONSNUMBER_FOR_INSERT       = ' '
*     CHECK_ADDRESS     = 'X'
*     IV_TIME_DEPENDENCE                   = ' '
*     IV_CONSIDER_ADRCOMC_FOR_INSERT       = 'X'
*     BLK_EXCPT         =
    IMPORTING
      RETURNCODE        = LV_RETURNCODE
    TABLES
      COMM_TABLE        = ADTEL
      ERROR_TABLE       = E_TABLE
*     COMM_TABLE_OUT    =
*     IT_USAGE          =
*     IT_USAGE_UUID     =
*     ET_USAGE_OUT      =
*     ET_USAGE_UUID_OUT =
*     ET_CREATED_USAGE_UUID                =
    EXCEPTIONS
      PARAMETER_ERROR   = 1
      ADDRESS_NOT_EXIST = 2
      INTERNAL_ERROR    = 3
      ADDRESS_BLOCKED   = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.

FORM ADD_FAX CHANGING LV_ADDR_NUM TYPE ADRC-ADDRNUMBER .
  DATA:
    LV_TABLE  LIKE SZAD_FIELD-TABLE_TYPE,
    LV_INDEX  TYPE INT4,
    LV_HANDLE TYPE SZAD_FIELD-HANDLE.
  DATA: LV_RETURNCODE TYPE AD_RETCODE.
  SELECT *
      FROM ADR3
      INTO TABLE @DATA(LT_ADR3)
      WHERE ADDRNUMBER = @LV_ADDR_NUM.
  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADFAX-CONSNUMBER = LV_INDEX.
  ENDIF.

  ADFAX-FAX_NUMBER = GS_DATA-FAX_NUMBER.
  ADFAX-FAX_EXTENS = GS_DATA-FAX_EXTENS.
  ADFAX-COUNTRY    = GS_DATA-COUNTRY.
  ADFAX-FLGDEFAULT = 'X'.
  ADFAX-HOME_FLAG = 'X'.
  ADFAX-R3_USER    = '1'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR3 TRANSPORTING NO FIELDS
      WITH KEY ADDRNUMBER = LV_ADDR_NUM.
    IF SY-SUBRC IS INITIAL.
      ADFAX-UPDATEFLAG = 'U'.
      IF GS_DATA-FAX_NUMBER IS INITIAL.
        ADFAX-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-FAX_NUMBER IS NOT INITIAL.
      ADFAX-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-FAX_NUMBER IS NOT INITIAL.
    ADFAX-UPDATEFLAG = 'I'.
    LV_HANDLE = 'Address'.
  ENDIF.
*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADFAX.

  LV_TABLE = 'ADFAX'.
  CALL FUNCTION 'ADDR_COMM_MAINTAIN'
    EXPORTING
      ADDRESS_HANDLE    = LV_HANDLE
      ADDRESS_NUMBER    = LV_ADDR_NUM
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
      TABLE_TYPE        = LV_TABLE
*     SUBSTITUTE_ALL_COMM_DATA             = ' '
*     ACCEPT_TELNR_CALL = ' '
*     CONSIDER_CONSNUMBER_FOR_INSERT       = ' '
*     CHECK_ADDRESS     = 'X'
*     IV_TIME_DEPENDENCE                   = ' '
*     IV_CONSIDER_ADRCOMC_FOR_INSERT       = 'X'
*     BLK_EXCPT         =
    IMPORTING
      RETURNCODE        = LV_RETURNCODE
    TABLES
      COMM_TABLE        = ADFAX
      ERROR_TABLE       = E_TABLE
*     COMM_TABLE_OUT    =
*     IT_USAGE          =
*     IT_USAGE_UUID     =
*     ET_USAGE_OUT      =
*     ET_USAGE_UUID_OUT =
*     ET_CREATED_USAGE_UUID                =
    EXCEPTIONS
      PARAMETER_ERROR   = 1
      ADDRESS_NOT_EXIST = 2
      INTERNAL_ERROR    = 3
      ADDRESS_BLOCKED   = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.
FORM ADD_SMTP CHANGING LV_ADDR_NUM TYPE ADRC-ADDRNUMBER.
  DATA:
    LV_TABLE  LIKE SZAD_FIELD-TABLE_TYPE,
    LV_INDEX  TYPE INT4,
    LV_HANDLE TYPE SZAD_FIELD-HANDLE.
  DATA: LV_RETURNCODE TYPE AD_RETCODE.
  SELECT *
      FROM ADR6
      INTO TABLE @DATA(LT_ADR6)
      WHERE ADDRNUMBER = @LV_ADDR_NUM.
  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADSMTP-CONSNUMBER = LV_INDEX.
  ENDIF.

  ADSMTP-SMTP_ADDR = GS_DATA-SMTP_ADDR.
*  ADSMTP-SMTP_SRCH = GS_DATA-SMTP_SRCH.
*  ADSMTP-COUNTRY    = GS_DATA-LAND1.
  ADSMTP-FLGDEFAULT = 'X'.
  ADSMTP-HOME_FLAG = 'X'.
  ADSMTP-R3_USER    = '1'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR6 TRANSPORTING NO FIELDS
      WITH KEY ADDRNUMBER = LV_ADDR_NUM.
    IF SY-SUBRC IS INITIAL.
      ADSMTP-UPDATEFLAG = 'U'.
      IF GS_DATA-SMTP_ADDR IS INITIAL.
        ADSMTP-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-SMTP_ADDR IS NOT INITIAL.
      ADSMTP-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-SMTP_ADDR IS NOT INITIAL.
    ADSMTP-UPDATEFLAG = 'I'.
    LV_HANDLE = 'Address'.
  ENDIF.
*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADSMTP.

  LV_TABLE = 'ADSMTP'.
  CALL FUNCTION 'ADDR_COMM_MAINTAIN'
    EXPORTING
      ADDRESS_HANDLE    = LV_HANDLE
      ADDRESS_NUMBER    = LV_ADDR_NUM
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
      TABLE_TYPE        = LV_TABLE
*     SUBSTITUTE_ALL_COMM_DATA             = ' '
*     ACCEPT_TELNR_CALL = ' '
*     CONSIDER_CONSNUMBER_FOR_INSERT       = ' '
*     CHECK_ADDRESS     = 'X'
*     IV_TIME_DEPENDENCE                   = ' '
*     IV_CONSIDER_ADRCOMC_FOR_INSERT       = 'X'
*     BLK_EXCPT         =
    IMPORTING
      RETURNCODE        = LV_RETURNCODE
    TABLES
      COMM_TABLE        = ADSMTP
      ERROR_TABLE       = E_TABLE
*     COMM_TABLE_OUT    =
*     IT_USAGE          =
*     IT_USAGE_UUID     =
*     ET_USAGE_OUT      =
*     ET_USAGE_UUID_OUT =
*     ET_CREATED_USAGE_UUID                =
    EXCEPTIONS
      PARAMETER_ERROR   = 1
      ADDRESS_NOT_EXIST = 2
      INTERNAL_ERROR    = 3
      ADDRESS_BLOCKED   = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.


FORM CHECK.
  CASE G_MODE.
    WHEN '1'. " update
      PERFORM CHECK_UPDATE.
    WHEN '2'. " insert
      PERFORM REQUIRE.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.
FORM  REQUIRE.
  IF GS_DATA-BUTXT IS INITIAL.
    PERFORM ADD_ERROR_MES
USING 'ZMS_BM_CS' 'E' 002
                TEXT-001 '' '' ''.

  ELSEIF GS_DATA-BUKRS IS INITIAL.
    PERFORM ADD_ERROR_MES
USING 'ZMS_BM_CS' 'E' 002
              TEXT-002 '' '' ''.

  ELSEIF GS_DATA-ORT01 IS INITIAL.
    PERFORM ADD_ERROR_MES
USING 'ZMS_BM_CS' 'E' 002
              TEXT-003 '' '' ''.

  ELSEIF GS_DATA-LAND1 IS INITIAL.
    PERFORM ADD_ERROR_MES
USING 'ZMS_BM_CS' 'E' 002
              TEXT-004 '' '' ''.

  ELSEIF GS_DATA-WAERS IS INITIAL.
    PERFORM ADD_ERROR_MES
USING 'ZMS_BM_CS' 'E' 002
              TEXT-005 '' '' ''.

  ELSEIF GS_DATA-SPRAS IS INITIAL.
    PERFORM ADD_ERROR_MES
USING 'ZMS_BM_CS' 'E' 002
              TEXT-006 '' '' ''.

*  ELSEIF GS_DATA-ADRNR IS INITIAL.
*    PERFORM ADD_ERROR_MES
*USING 'ZMS_BM_CS' 'E' 002
*              TEXT-007 '' '' ''.
  ENDIF.

ENDFORM.
FORM ADD_ERROR_MES USING    P_ID     TYPE ANY
                            P_TYPE   TYPE ANY
                            P_LV_NUM TYPE ANY
                            P_V1     TYPE ANY
                            P_V2     TYPE ANY
                            P_V3     TYPE ANY
                            P_V4     TYPE ANY.

  DATA: LS_RETURN TYPE BAPIRET2.

  CLEAR LS_RETURN.

  LS_RETURN-TYPE       = P_TYPE.
  LS_RETURN-ID         = P_ID.
  LS_RETURN-NUMBER     = P_LV_NUM.
  LS_RETURN-MESSAGE_V1 = P_V1.

  LS_RETURN-MESSAGE_V2 = P_V2.
  LS_RETURN-MESSAGE_V3 = P_V3.
  LS_RETURN-MESSAGE_V4 = P_V4.
  MESSAGE ID 'ZMS_BM_CS' TYPE 'E' NUMBER 002  INTO  LS_RETURN-MESSAGE WITH P_V1  .
  APPEND LS_RETURN TO GT_RETURN.

ENDFORM.
FORM CHECK_UPDATE.
  DATA:
    LS_T001 TYPE T001,
    I_DATA  TYPE  ZST_BM_V_T001_ADDRESS.

  I_DATA = GS_DATA.
  SELECT SINGLE
    BUKRS
      FROM T001
      INTO CORRESPONDING FIELDS OF  LS_T001
      WHERE BUKRS = GS_DATA-BUKRS.

  IF SY-SUBRC IS INITIAL .
    IF  GS_DATA-BUTXT  IS INITIAL
       AND  GS_DATA-TITLE_MEDI IS INITIAL
       AND  GS_DATA-NAME1 IS INITIAL
       AND  GS_DATA-NAME2 IS INITIAL
       AND  GS_DATA-NAME3 IS INITIAL
       AND  GS_DATA-NAME4 IS INITIAL
       AND  GS_DATA-SORT1 IS INITIAL
       AND  GS_DATA-SORT2 IS INITIAL
       AND  GS_DATA-STR_SUPPL1 IS INITIAL
       AND  GS_DATA-STREET IS INITIAL
       AND  GS_DATA-POST_CODE1 IS INITIAL
       AND  GS_DATA-CITY1 IS INITIAL
       AND  GS_DATA-COUNTRY IS INITIAL
       AND  GS_DATA-REGION IS INITIAL
       AND  GS_DATA-TIME_ZONE IS INITIAL
       AND  GS_DATA-PO_BOX IS INITIAL
       AND  GS_DATA-POST_CODE2 IS INITIAL
       AND  GS_DATA-POST_CODE3 IS INITIAL
       AND  GS_DATA-LANGU IS INITIAL
       AND  GS_DATA-DEFLT_COMM IS INITIAL
       AND  GS_DATA-REMARK IS INITIAL.
    ELSE.
      LS_T001-BUTXT = GS_DATA-BUTXT.
      LS_T001-ORT01 = GS_DATA-ORT01.
      LS_T001-LAND1 = GS_DATA-LAND1.
      LS_T001-WAERS = GS_DATA-WAERS.
      LS_T001-SPRAS = GS_DATA-SPRAS.
      UPDATE  T001 FROM LS_T001.
    ENDIF.
  ENDIF.
ENDFORM.
FORM BEFORE_SAVE_T001.
  PERFORM T001A_T001X_LOESCHEN.
  PERFORM T001Z_LOESCHEN.
  PERFORM T882_PFLEGE_VORBEREITEN.
  CLEAR SY-SUBRC.                      " bei SY-SUBRC <> 0 kein Sichern!
ENDFORM.
FORM T001A_T001X_LOESCHEN.

  LOOP AT V_T001_TOTAL
       WHERE ACTION CA 'DY'.
    DELETE FROM T001A
           WHERE BUKRS = V_T001_TOTAL-BUKRS.
    DELETE FROM T001X
           WHERE BUKRS = V_T001_TOTAL-BUKRS.
  ENDLOOP.

ENDFORM.
FORM T001Z_LOESCHEN.
  CLEAR BUKRSTAB.
  REFRESH BUKRSTAB.
  LOOP AT V_T001_TOTAL WHERE ACTION CA 'DY'.
    BUKRSTAB-BUKRS = V_T001_TOTAL-BUKRS.
    APPEND BUKRSTAB.
  ENDLOOP.
  CALL FUNCTION 'T001Z_DELETE'
    TABLES
      T_BUKRS = BUKRSTAB.
ENDFORM.
FORM T882_PFLEGE_VORBEREITEN.

*------- IRFCTP mit allen geänderten Einträgen füllen ------------------
  REFRESH IRFCTP.
  CLEAR IRFCTP.
  LOOP AT V_T001_TOTAL
       WHERE ACTION <> SPACE
       AND   ACTION <> 'X'.
    CLEAR IRFCTP.
    CASE V_T001_TOTAL-ACTION.

*------- Eintrag neu ---------------------------------------------------
      WHEN 'N'.
        IRFCTP-BUKRS = V_T001_TOTAL-BUKRS.
        IRFCTP-AKTYP = 'I'.
        APPEND IRFCTP.

*------- Eintrag geändert ----------------------------------------------
      WHEN 'U'.
        IRFCTP-BUKRS = V_T001_TOTAL-BUKRS.
        IRFCTP-AKTYP = 'U'.

*------- ... Infos aus T001 und T001A besorgen -------------------------
        SELECT SINGLE * FROM T001
               WHERE BUKRS = V_T001_TOTAL-BUKRS.
        IF SY-SUBRC = 0.
          IRFCTP-PERIV = T001-PERIV.
        ENDIF.
        SELECT SINGLE * FROM FINS_T001A "Replace T001A with view FINS_T001A
               INTO CORRESPONDING FIELDS OF @T001A
               WHERE BUKRS = @V_T001_TOTAL-BUKRS.
        IF SY-SUBRC = 0.
          IRFCTP-CURT2 = T001A-CURTP.
          IRFCTP-CURT3 = T001A-CURTP2.
        ENDIF.
        APPEND IRFCTP.

*------- Eintrag gelöscht ----------------------------------------------
      WHEN 'D'.
        IRFCTP-BUKRS = V_T001_TOTAL-BUKRS.
        IRFCTP-AKTYP = 'D'.
        APPEND IRFCTP.

*------- Eintrag geändert und dann gelöscht ----------------------------
      WHEN 'Y'.
        IRFCTP-BUKRS = V_T001_TOTAL-BUKRS.
        IRFCTP-AKTYP = 'D'.
        APPEND IRFCTP.
    ENDCASE.
  ENDLOOP.

ENDFORM.
FORM AFTER_SAVE_T001.

  TABLE = 'GLT0'.
  REFRESH IT882.
  CLEAR IT882.
  CALL FUNCTION 'G_MODIFY_882_FOR_FIXED_LEDGERS'
    EXPORTING
      TABLE  = TABLE
    TABLES
      IT882  = IT882
      IRFCTP = IRFCTP.

* Fortschreiben von FAGL_ORG_INFO* für HANA
  PERFORM GENERATE_FAGL_ORG_INFO.

  CALL FUNCTION 'FINS_UPD_FINSC_001A_REP_EXEC'
    EXPORTING
      IV_MANDT = SY-MANDT.

ENDFORM.
FORM GENERATE_FAGL_ORG_INFO .
* Generate FAGL_ORG_INFO* entries for HANA
* Attention: FM 'FAGL_VIEWS_GENERATE_ALL'
* may not exist in lower releases!
  TRY.
      CALL FUNCTION 'FAGL_VIEWS_GENERATE_ALL'
        EXPORTING
          I_ALL_CLIENTS       = ' '
          IV_TARCLIENT        = SY-MANDT
          ID_CHECK_HDB_ACTIVE = 'X'
          ID_GEN_VIEWS        = ' '
          ID_GEN_ORG_INFO     = 'X'
        EXCEPTIONS
          SYSTEM_ERROR        = 1
          OTHERS              = 2.
    CATCH CX_SY_DYN_CALL_ILLEGAL_FUNC.
      SY-SUBRC = 4.
  ENDTRY.
ENDFORM.
