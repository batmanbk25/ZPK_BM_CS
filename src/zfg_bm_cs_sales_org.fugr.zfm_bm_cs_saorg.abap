FUNCTION ZFM_BM_CS_SAORG.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_DATA) TYPE  ZST_BM_SALES
*"  EXPORTING
*"     REFERENCE(ET_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------
  DATA:
    LS_TVKO     TYPE  TVKO,
    LV_ADDR_NUM TYPE ADRC-ADDRNUMBER.
  DATA: LSS_TVKO TYPE TVKO,
        LS_TVKOT TYPE TVKOT.
  CLEAR:
   GT_RETURN,
   ADTEL[],
   ADFAX[],
   ADSMTP[],
   GT_TVKO
   .
  GS_DATA = I_DATA.
  SELECT
    TVKO~VKORG,
    TVKOT~VTEXT,
      TVKO~WAERS ,
     TVKO~TXNAM_ADR ,
      TVKO~TXNAM_KOP ,
      TVKO~TXNAM_FUS ,
      TVKO~TXNAM_GRU ,
      TVKO~VKOAU ,
      TVKO~KUNNR ,
      TVKO~BOAVO ,
      TVKO~VKOKL ,
      TVKO~EKORG,
      TVKO~EKGRP ,
      TVKO~LIFNR ,
      TVKO~WERKS ,
      TVKO~BSART ,
      TVKO~BSTYP ,
      TVKO~BWART ,
      TVKO~LGORT ,
      TVKO~TXNAM_SDB ,
      TVKO~HIDE,
      TVKO~ADRNR
      FROM TVKO
      LEFT JOIN TVKOT
        ON TVKOT~VKORG = TVKO~VKORG
        AND TVKOT~SPRAS = @SY-LANGU
      INTO CORRESPONDING FIELDS OF TABLE @GT_TVKO
      WHERE TVKO~VKORG = @I_DATA-VKORG.
**  ENDSELECT.
  IF SY-SUBRC IS INITIAL.
    CLEAR
    G_MODE.
    G_MODE = '1'.
    PERFORM CHECK .
    ET_RETURN = GT_RETURN.
    IF ET_RETURN IS NOT INITIAL .
      RETURN.
    ENDIF.
    READ TABLE GT_TVKO INTO GS_TVKO INDEX 1.
    IF SY-SUBRC = 0.
      CASE  GS_TVKO-ADRNR.
        WHEN '' .
          PERFORM  INSERT_ADDR CHANGING LV_ADDR_NUM.

          GS_TVKO-ADRNR = LV_ADDR_NUM.
        WHEN OTHERS.
          PERFORM UPDATE_ADDR CHANGING GS_TVKO.
      ENDCASE.
      GS_TVKO-VKORG = GS_DATA-VKORG.
      GS_TVKO-VTEXT = GS_DATA-VTEXT.
      GS_TVKO-WAERS = GS_DATA-WAERS.
      GS_TVKO-TXNAM_ADR = GS_DATA-TXNAM_ADR.
      GS_TVKO-TXNAM_KOP = GS_DATA-TXNAM_KOP.
      GS_TVKO-TXNAM_FUS = GS_DATA-TXNAM_FUS.
      GS_TVKO-TXNAM_GRU = GS_DATA-TXNAM_GRU.
      GS_TVKO-VKOAU = GS_DATA-VKOAU.
      GS_TVKO-KUNNR = GS_DATA-KUNNR.
      GS_TVKO-BOAVO = GS_DATA-BOAVO.
      GS_TVKO-VKOKL = GS_DATA-VKOKL.
      GS_TVKO-EKORG = GS_DATA-EKORG.
      GS_TVKO-EKGRP = GS_DATA-EKGRP.
      GS_TVKO-LIFNR = GS_DATA-LIFNR.
      GS_TVKO-WERKS = GS_DATA-WERKS.
      GS_TVKO-BSART = GS_DATA-BSART.
      GS_TVKO-BSTYP = GS_DATA-BSTYP.
      GS_TVKO-BWART = GS_DATA-BWART.
      GS_TVKO-LGORT = GS_DATA-LGORT.
      GS_TVKO-TXNAM_SDB = GS_DATA-TXNAM_SDB.
      GS_TVKO-HIDE = GS_DATA-HIDE.
      GS_TVKO-SPRAS = SY-LANGU.
      MOVE-CORRESPONDING GS_TVKO TO LSS_TVKO.
      MOVE-CORRESPONDING GS_TVKO TO LS_TVKOT.

      UPDATE  TVKO FROM LSS_TVKO.
      UPDATE  TVKOT FROM LS_TVKOT.
    ENDIF.
  ELSE.
    CLEAR
       G_MODE.
    G_MODE = '2'.
    PERFORM CHECK.

    ET_RETURN = GT_RETURN.
    IF ET_RETURN IS NOT INITIAL .
      RETURN.
    ENDIF.
    PERFORM  INSERT_ADDR CHANGING LV_ADDR_NUM.
    GS_TVKO-VKORG = GS_DATA-VKORG.
    GS_TVKO-VTEXT = GS_DATA-VTEXT.
    GS_TVKO-WAERS = GS_DATA-WAERS.
    GS_TVKO-TXNAM_ADR = GS_DATA-TXNAM_ADR.
    GS_TVKO-TXNAM_KOP = GS_DATA-TXNAM_KOP.
    GS_TVKO-TXNAM_FUS = GS_DATA-TXNAM_FUS.
    GS_TVKO-TXNAM_GRU = GS_DATA-TXNAM_GRU.
    GS_TVKO-VKOAU = GS_DATA-VKOAU.
    GS_TVKO-KUNNR = GS_DATA-KUNNR.
    GS_TVKO-BOAVO = GS_DATA-BOAVO.
    GS_TVKO-VKOKL = GS_DATA-VKOKL.
    GS_TVKO-EKORG = GS_DATA-EKORG.
    GS_TVKO-EKGRP = GS_DATA-EKGRP.
    GS_TVKO-LIFNR = GS_DATA-LIFNR.
    GS_TVKO-WERKS = GS_DATA-WERKS.
    GS_TVKO-BSART = GS_DATA-BSART.
    GS_TVKO-BSTYP = GS_DATA-BSTYP.
    GS_TVKO-BWART = GS_DATA-BWART.
    GS_TVKO-LGORT = GS_DATA-LGORT.
    GS_TVKO-TXNAM_SDB = GS_DATA-TXNAM_SDB.
    GS_TVKO-HIDE = GS_DATA-HIDE.
    GS_TVKO-ADRNR = LV_ADDR_NUM.
    GS_TVKO-SPRAS = SY-LANGU.


    MOVE-CORRESPONDING GS_TVKO TO LSS_TVKO.
    MOVE-CORRESPONDING GS_TVKO TO LS_TVKOT.
    INSERT TVKO FROM LSS_TVKO." GS_TVKO.
    INSERT  TVKOT FROM LS_TVKOT. "GS_TVKO.


  ENDIF.

ENDFUNCTION.
FORM CHECK.
  CASE G_MODE.
    WHEN '1'. " update
      PERFORM CHECK_UPDATE.
    WHEN '2'. " insert
*      PERFORM REQUIRE.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.

FORM CHECK_UPDATE.
  DATA:
    LS_TVKO TYPE TVKO,
    I_DATA  TYPE  ZST_BM_SALES.

  I_DATA = GS_DATA.
  SELECT SINGLE
    VKORG
      FROM TVKO
      INTO CORRESPONDING FIELDS OF  LS_TVKO
      WHERE VKORG = GS_DATA-VKORG.

  IF SY-SUBRC IS INITIAL .
    IF  GS_DATA-VTEXT  IS INITIAL
       AND  GS_DATA-TITLE_MEDI IS INITIAL
       AND  GS_DATA-NAME1 IS INITIAL
       AND  GS_DATA-NAME2 IS INITIAL
       AND  GS_DATA-NAME3 IS INITIAL
       AND  GS_DATA-NAME4 IS INITIAL
       AND  GS_DATA-SORT1 IS INITIAL
       AND  GS_DATA-SORT2 IS INITIAL
       AND  GS_DATA-STR_SUPPL1 IS INITIAL
       AND  GS_DATA-STR_SUPPL2 IS INITIAL
       AND  GS_DATA-STR_SUPPL3 IS INITIAL
       AND  GS_DATA-LOCATION IS INITIAL
       AND  GS_DATA-STREET IS INITIAL
       AND  GS_DATA-POST_CODE1 IS INITIAL
       AND  GS_DATA-CITY1 IS INITIAL
       AND  GS_DATA-CITY2 IS INITIAL
       AND  GS_DATA-COUNTRY IS INITIAL
       AND  GS_DATA-REGION IS INITIAL
       AND  GS_DATA-TIME_ZONE IS INITIAL
       AND  GS_DATA-PO_BOX IS INITIAL
       AND  GS_DATA-POST_CODE2 IS INITIAL
       AND  GS_DATA-POST_CODE3 IS INITIAL
       AND  GS_DATA-LANGU IS INITIAL
       AND  GS_DATA-DEFLT_COMM IS INITIAL
       AND  GS_DATA-REMARK IS INITIAL.
    ELSE.
      LS_TVKO-VKORG = GS_DATA-VKORG.
      LS_TVKO-WAERS = GS_DATA-WAERS.
      LS_TVKO-TXNAM_ADR = GS_DATA-TXNAM_ADR.
      LS_TVKO-TXNAM_KOP = GS_DATA-TXNAM_KOP.
      LS_TVKO-TXNAM_FUS = GS_DATA-TXNAM_FUS.
      LS_TVKO-TXNAM_GRU = GS_DATA-TXNAM_GRU.
      LS_TVKO-VKOAU = GS_DATA-VKOAU.
      LS_TVKO-KUNNR = GS_DATA-KUNNR.
      LS_TVKO-BOAVO = GS_DATA-BOAVO.
      LS_TVKO-VKOKL = GS_DATA-VKOKL.
      LS_TVKO-EKORG = GS_DATA-EKORG.
      LS_TVKO-EKGRP = GS_DATA-EKGRP.
      LS_TVKO-LIFNR = GS_DATA-LIFNR.
      LS_TVKO-WERKS = GS_DATA-WERKS.
      LS_TVKO-BSART = GS_DATA-BSART.
      LS_TVKO-BSTYP = GS_DATA-BSTYP.
      LS_TVKO-BWART = GS_DATA-BWART.
      LS_TVKO-LGORT = GS_DATA-LGORT.
      LS_TVKO-TXNAM_SDB = GS_DATA-TXNAM_SDB.
      LS_TVKO-HIDE = GS_DATA-HIDE.

      UPDATE  TVKO FROM LS_TVKO.
    ENDIF.
  ENDIF.
ENDFORM.
FORM INSERT_ADDR CHANGING LV_ADDR_NUM  TYPE ADRC-ADDRNUMBER.

  DATA:

    LV_ADDR1_DATA TYPE ADDR1_DATA,

    LV_ADDR_REF   TYPE ADDR_REF,

    LV_ADDR_DATA  TYPE ADDR1_DATA.

  LV_ADDR1_DATA-TITLE = GS_DATA-TITLE_MEDI.
  LV_ADDR1_DATA-NAME1 = GS_DATA-NAME1.
  LV_ADDR1_DATA-NAME2 = GS_DATA-NAME2.
  LV_ADDR1_DATA-NAME3 = GS_DATA-NAME3.
  LV_ADDR1_DATA-NAME4 = GS_DATA-NAME4.
  LV_ADDR1_DATA-SORT1 = GS_DATA-SORT1.
  LV_ADDR1_DATA-SORT2 = GS_DATA-SORT2.
  LV_ADDR1_DATA-STR_SUPPL1 = GS_DATA-STR_SUPPL1.
  LV_ADDR1_DATA-STR_SUPPL2 = GS_DATA-STR_SUPPL2.
  LV_ADDR1_DATA-STR_SUPPL3 = GS_DATA-STR_SUPPL3.
  LV_ADDR1_DATA-LOCATION = GS_DATA-LOCATION.
  LV_ADDR1_DATA-STREET = GS_DATA-STREET.
  LV_ADDR1_DATA-POST_CODE1 = GS_DATA-POST_CODE1.
  LV_ADDR1_DATA-CITY1 = GS_DATA-CITY1.
  LV_ADDR1_DATA-CITY2 = GS_DATA-CITY2.
  LV_ADDR1_DATA-COUNTRY = GS_DATA-COUNTRY.
  LV_ADDR1_DATA-REGION = GS_DATA-REGION.
  LV_ADDR1_DATA-TIME_ZONE = GS_DATA-TIME_ZONE.
  LV_ADDR1_DATA-PO_BOX = GS_DATA-PO_BOX.
  LV_ADDR1_DATA-POST_CODE2 = GS_DATA-POST_CODE2.
  LV_ADDR1_DATA-POST_CODE3 = GS_DATA-POST_CODE3.
  LV_ADDR1_DATA-LANGU = GS_DATA-LANGU.
  LV_ADDR1_DATA-DEFLT_COMM = GS_DATA-DEFLT_COMM.
  LV_ADDR1_DATA-REMARK = GS_DATA-REMARK.

  LV_ADDR_REF-ADDR_GROUP = 'CA01'.

*wa_addr_ref-owner = 'X'.

  LV_ADDR_REF-APPL_TABLE = 'ADRC'.

  LV_ADDR_REF-APPL_FIELD = 'ADDRNUMBER'.

  CALL FUNCTION 'ADDR_INSERT'
    EXPORTING
      ADDRESS_DATA    = LV_ADDR1_DATA
      ADDRESS_GROUP   = 'CA01'
      ADDRESS_HANDLE  = 'Address '
*     DATE_FROM       = '00010101'
*     LANGUAGE        = SY-LANGU
*     CHECK_EMPTY_ADDRESS = 'X'
*     CHECK_ADDRESS   = 'X'
    IMPORTING
      ADDRESS_DATA    = LV_ADDR_DATA
*     RETURNCODE      =
* TABLES
*     ERROR_TABLE     =
    EXCEPTIONS
      ADDRESS_EXISTS  = 1
      PARAMETER_ERROR = 2
      INTERNAL_ERROR  = 3
      OTHERS          = 4.

  IF SY-SUBRC <> 0.

* Implement suitable error handling here

  ENDIF.

  PERFORM ADD_TEL CHANGING LV_ADDR_NUM.
  PERFORM ADD_FAX CHANGING LV_ADDR_NUM.
  PERFORM ADD_SMTP CHANGING LV_ADDR_NUM.


  CALL FUNCTION 'ADDR_NUMBER_GET'
    EXPORTING
      ADDRESS_HANDLE           = 'Address '
      ADDRESS_REFERENCE        = LV_ADDR_REF
      PERSONAL_ADDRESS         = ' '
*     NUMBERRANGE_NUMBER       = '01'
*     E071K_WA                 =
*     GENERATE_TRANSPORT_ENTRIES =
*     OWNER                    = 'X'
*     TABLE_NAME               =
*     FIELD_NAME               =
*     OBJKEY                   =
    IMPORTING
      ADDRESS_NUMBER           = LV_ADDR_NUM
*     RETURNCODE_NUMBERRANGE   =
* TABLES
*     E071K_TAB                =
    EXCEPTIONS
      ADDRESS_HANDLE_NOT_EXIST = 1
      INTERNAL_ERROR           = 2
      PARAMETER_ERROR          = 3
      OTHERS                   = 4.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  CALL FUNCTION 'ADDR_MEMORY_SAVE'
    EXPORTING
      EXECUTE_IN_UPDATE_TASK = ' '
    EXCEPTIONS
      ADDRESS_NUMBER_MISSING = 1
      PERSON_NUMBER_MISSING  = 2
      INTERNAL_ERROR         = 3
      DATABASE_ERROR         = 4
      REFERENCE_MISSING      = 5
      OTHERS                 = 6.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.

  COMMIT WORK AND WAIT.

  CALL FUNCTION 'ADDR_MEMORY_CLEAR'
    EXPORTING
      FORCE              = ' '
    EXCEPTIONS
      UNSAVED_DATA_EXIST = 1
      INTERNAL_ERROR     = 2
      OTHERS             = 3.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.
ENDFORM.
FORM UPDATE_ADDR CHANGING LPS_TVKO TYPE GTY_TVKO.
  DATA:
    LV_ADDR_NUM       TYPE ADRC-ADDRNUMBER,
    LV_ADDR1_DATA     TYPE ADDR1_DATA,
    LV_RETURNCODE     TYPE AD_RETCODE,
    LS_ADDR1_SEL      LIKE  ADDR1_SEL,
    LT_ADDR_ERROR     TYPE TABLE OF ADDR_ERROR,
    LV_ADDR1_OLD_VERS TYPE TABLE OF ADDR_VERS,
    LS_AD1_FLAGS      LIKE   AD1_FLAGS,
    LV_ADDR_GET       LIKE  ADDR1_VAL.

  LV_ADDR_NUM = LPS_TVKO-ADRNR.

  LS_ADDR1_SEL-ADDRNUMBER = LV_ADDR_NUM.

  CALL FUNCTION 'ADDR_GET'
    EXPORTING
      ADDRESS_SELECTION       = LS_ADDR1_SEL
    IMPORTING
      ADDRESS_VALUE           = LV_ADDR_GET
      ADDRESS_ADDITIONAL_INFO = LS_AD1_FLAGS            "*1181i
*     returncode              = returncode              "*963d
      RETURNCODE              = LV_RETURNCODE           "*963i
    TABLES
      ERROR_TABLE             = E_TABLE
      VERSIONS                = LV_ADDR1_OLD_VERS
    EXCEPTIONS
      PARAMETER_ERROR         = 1
      ADDRESS_NOT_EXIST       = 2
      VERSION_NOT_EXIST       = 3
      INTERNAL_ERROR          = 4
      OTHERS                  = 5.
  DATA:
    LS_TVKO TYPE  TVKO,
    I_DATA  TYPE  ZST_BM_SALES.

  MOVE-CORRESPONDING LV_ADDR_GET TO LV_ADDR1_DATA.

  I_DATA = GS_DATA.
  SELECT SINGLE
    VKORG
      FROM TVKO
      INTO CORRESPONDING FIELDS OF  LS_TVKO
      WHERE VKORG = GS_DATA-VKORG.

  IF SY-SUBRC IS INITIAL .
    LV_ADDR1_DATA-TITLE = GS_DATA-TITLE_MEDI .
    LV_ADDR1_DATA-NAME1 = GS_DATA-NAME1 .
    LV_ADDR1_DATA-NAME2 = GS_DATA-NAME2 .
    LV_ADDR1_DATA-NAME3 = GS_DATA-NAME3 .
    LV_ADDR1_DATA-NAME4 = GS_DATA-NAME4 .
    LV_ADDR1_DATA-SORT1 = GS_DATA-SORT1 .
    LV_ADDR1_DATA-SORT2 = GS_DATA-SORT2 .
    LV_ADDR1_DATA-STR_SUPPL1 = GS_DATA-STR_SUPPL1 .
    LV_ADDR1_DATA-STR_SUPPL2 = GS_DATA-STR_SUPPL2 .
    LV_ADDR1_DATA-STR_SUPPL3 = GS_DATA-STR_SUPPL3 .
    LV_ADDR1_DATA-LOCATION = GS_DATA-LOCATION .
    LV_ADDR1_DATA-STREET = GS_DATA-STREET .
    LV_ADDR1_DATA-POST_CODE1 = GS_DATA-POST_CODE1 .
    LV_ADDR1_DATA-CITY1 = GS_DATA-CITY1 .
    LV_ADDR1_DATA-CITY2 = GS_DATA-CITY2 .
    LV_ADDR1_DATA-COUNTRY = GS_DATA-COUNTRY .
    LV_ADDR1_DATA-REGION = GS_DATA-REGION .
    LV_ADDR1_DATA-TIME_ZONE = GS_DATA-TIME_ZONE .
    LV_ADDR1_DATA-PO_BOX = GS_DATA-PO_BOX .
    LV_ADDR1_DATA-POST_CODE2 = GS_DATA-POST_CODE2 .
    LV_ADDR1_DATA-POST_CODE3 = GS_DATA-POST_CODE3 .
    LV_ADDR1_DATA-LANGU = GS_DATA-LANGU .
    LV_ADDR1_DATA-DEFLT_COMM = GS_DATA-DEFLT_COMM .
    LV_ADDR1_DATA-REMARK = GS_DATA-REMARK .
  ENDIF.

  CALL FUNCTION 'ADDR_UPDATE'
    EXPORTING
      ADDRESS_DATA      = LV_ADDR1_DATA
      ADDRESS_NUMBER    = LV_ADDR_NUM
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
*     NATION            = ' '
*     CHECK_EMPTY_ADDRESS        = 'X'
*     CHECK_ADDRESS     = 'X'
*     CHECK_OTHER_VERSIONS       = 'X'
*     BLK_EXCPT         =
    IMPORTING
*     ADDRESS_DATA      =
      RETURNCODE        = LV_RETURNCODE
*     DATA_HAS_CHANGED  =
    TABLES
      ERROR_TABLE       = LT_ADDR_ERROR
    EXCEPTIONS
      ADDRESS_NOT_EXIST = 1
      PARAMETER_ERROR   = 2
      VERSION_NOT_EXIST = 3
      INTERNAL_ERROR    = 4
      ADDRESS_BLOCKED   = 5
      OTHERS            = 6.
  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.

  PERFORM ADD_TEL CHANGING LV_ADDR_NUM.
  PERFORM ADD_FAX CHANGING LV_ADDR_NUM.
  PERFORM ADD_SMTP CHANGING LV_ADDR_NUM.

  CALL FUNCTION 'ADDR_MEMORY_SAVE'
    EXPORTING
      EXECUTE_IN_UPDATE_TASK = ' '
    EXCEPTIONS
      ADDRESS_NUMBER_MISSING = 1
      PERSON_NUMBER_MISSING  = 2
      INTERNAL_ERROR         = 3
      DATABASE_ERROR         = 4
      REFERENCE_MISSING      = 5
      OTHERS                 = 6.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.

  CALL FUNCTION 'ADDR_MEMORY_CLEAR'
    EXPORTING
      FORCE              = ' '
    EXCEPTIONS
      UNSAVED_DATA_EXIST = 1
      INTERNAL_ERROR     = 2
      OTHERS             = 3.

  IF SY-SUBRC <> 0.

    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO

    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

  ENDIF.

ENDFORM.

FORM ADD_TEL CHANGING LV_ADDR_NUM TYPE ADRC-ADDRNUMBER .
  DATA:
    LV_TABLE  LIKE SZAD_FIELD-TABLE_TYPE,
    LV_INDEX  TYPE INT4,
    LV_HANDLE TYPE SZAD_FIELD-HANDLE.
  DATA: LV_RETURNCODE TYPE AD_RETCODE.

  SELECT *
    FROM ADR2
    INTO TABLE @DATA(LT_ADR2)
    WHERE ADDRNUMBER = @LV_ADDR_NUM.

  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADTEL-CONSNUMBER = LV_INDEX.
  ENDIF.

  ADTEL-TEL_NUMBER = GS_DATA-TEL_NUMBER.
  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  ADTEL-COUNTRY    = GS_DATA-COUNTRY.
  ADTEL-FLGDEFAULT = 'X'.
  ADTEL-HOME_FLAG = 'X'.
  ADTEL-R3_USER    = '1'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR2 TRANSPORTING NO FIELDS
      WITH KEY ADDRNUMBER = LV_ADDR_NUM
               R3_USER    = '1'.
    IF SY-SUBRC IS INITIAL.
      ADTEL-UPDATEFLAG = 'U'.
      IF GS_DATA-TEL_NUMBER IS INITIAL.
        ADTEL-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-TEL_NUMBER IS NOT INITIAL.
      ADTEL-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-TEL_NUMBER IS NOT INITIAL.
    ADTEL-UPDATEFLAG = 'I'.
  ENDIF.

*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADTEL.

  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADTEL-CONSNUMBER = LV_INDEX.
  ENDIF.
  ADTEL-TEL_NUMBER = GS_DATA-MOB_NUMBER.
  ADTEL-TEL_EXTENS = GS_DATA-MOB_NUMBER.
  ADTEL-COUNTRY    = GS_DATA-COUNTRY.
  ADTEL-FLGDEFAULT = ''.
  ADTEL-HOME_FLAG = ''.
  ADTEL-R3_USER    = '3'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR2 TRANSPORTING NO FIELDS
      WITH KEY ADDRNUMBER = LV_ADDR_NUM
               R3_USER    = '3'.
    IF SY-SUBRC IS INITIAL.
      ADTEL-UPDATEFLAG = 'U'.
      IF GS_DATA-MOB_NUMBER IS INITIAL.
        ADTEL-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-MOB_NUMBER IS NOT INITIAL .
      ADTEL-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-MOB_NUMBER IS NOT INITIAL .
    ADTEL-UPDATEFLAG = 'I'.
    LV_HANDLE = 'Address'.
  ENDIF.
*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADTEL.

  LV_TABLE = 'ADTEL'.
  CALL FUNCTION 'ADDR_COMM_MAINTAIN'
    EXPORTING
      ADDRESS_NUMBER    = LV_ADDR_NUM
      ADDRESS_HANDLE    = LV_HANDLE
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
      TABLE_TYPE        = LV_TABLE
*     SUBSTITUTE_ALL_COMM_DATA             = ' '
*     ACCEPT_TELNR_CALL = ' '
*     CONSIDER_CONSNUMBER_FOR_INSERT       = ' '
*     CHECK_ADDRESS     = 'X'
*     IV_TIME_DEPENDENCE                   = ' '
*     IV_CONSIDER_ADRCOMC_FOR_INSERT       = 'X'
*     BLK_EXCPT         =
    IMPORTING
      RETURNCODE        = LV_RETURNCODE
    TABLES
      COMM_TABLE        = ADTEL
      ERROR_TABLE       = E_TABLE
*     COMM_TABLE_OUT    =
*     IT_USAGE          =
*     IT_USAGE_UUID     =
*     ET_USAGE_OUT      =
*     ET_USAGE_UUID_OUT =
*     ET_CREATED_USAGE_UUID                =
    EXCEPTIONS
      PARAMETER_ERROR   = 1
      ADDRESS_NOT_EXIST = 2
      INTERNAL_ERROR    = 3
      ADDRESS_BLOCKED   = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  COMMIT WORK AND WAIT.
ENDFORM.

FORM ADD_FAX CHANGING LV_ADDR_NUM TYPE ADRC-ADDRNUMBER .
  DATA:
    LV_TABLE  LIKE SZAD_FIELD-TABLE_TYPE,
    LV_INDEX  TYPE INT4,
    LV_HANDLE TYPE SZAD_FIELD-HANDLE.
  DATA: LV_RETURNCODE TYPE AD_RETCODE.

  SELECT *
    FROM ADR3
    INTO TABLE @DATA(LT_ADR3)
    WHERE ADDRNUMBER = @LV_ADDR_NUM.
  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADFAX-CONSNUMBER = LV_INDEX.
  ENDIF.

  ADFAX-FAX_NUMBER = GS_DATA-FAX_NUMBER.
  ADFAX-FAX_EXTENS = GS_DATA-FAX_EXTENS.
  ADFAX-COUNTRY    = GS_DATA-COUNTRY.
  ADFAX-FLGDEFAULT = 'X'.
  ADFAX-HOME_FLAG = 'X'.
  ADFAX-R3_USER    = '1'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR3 TRANSPORTING NO FIELDS
      WITH KEY ADDRNUMBER = LV_ADDR_NUM.
    IF SY-SUBRC IS INITIAL.
      ADFAX-UPDATEFLAG = 'U'.
      IF  GS_DATA-FAX_NUMBER IS INITIAL.
        ADFAX-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-FAX_NUMBER IS NOT INITIAL.
      ADFAX-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-FAX_NUMBER IS NOT INITIAL.
    ADFAX-UPDATEFLAG = 'I'.
    LV_HANDLE = 'Address'.
  ENDIF.
*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADFAX.

  LV_TABLE = 'ADFAX'.
  CALL FUNCTION 'ADDR_COMM_MAINTAIN'
    EXPORTING
      ADDRESS_HANDLE    = LV_HANDLE
      ADDRESS_NUMBER    = LV_ADDR_NUM
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
      TABLE_TYPE        = LV_TABLE
*     SUBSTITUTE_ALL_COMM_DATA             = ' '
*     ACCEPT_TELNR_CALL = ' '
*     CONSIDER_CONSNUMBER_FOR_INSERT       = ' '
*     CHECK_ADDRESS     = 'X'
*     IV_TIME_DEPENDENCE                   = ' '
*     IV_CONSIDER_ADRCOMC_FOR_INSERT       = 'X'
*     BLK_EXCPT         =
    IMPORTING
      RETURNCODE        = LV_RETURNCODE
    TABLES
      COMM_TABLE        = ADFAX
      ERROR_TABLE       = E_TABLE
*     COMM_TABLE_OUT    =
*     IT_USAGE          =
*     IT_USAGE_UUID     =
*     ET_USAGE_OUT      =
*     ET_USAGE_UUID_OUT =
*     ET_CREATED_USAGE_UUID                =
    EXCEPTIONS
      PARAMETER_ERROR   = 1
      ADDRESS_NOT_EXIST = 2
      INTERNAL_ERROR    = 3
      ADDRESS_BLOCKED   = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.
FORM ADD_SMTP CHANGING LV_ADDR_NUM TYPE ADRC-ADDRNUMBER.
  DATA:
    LV_TABLE  LIKE SZAD_FIELD-TABLE_TYPE,
    LV_INDEX  TYPE INT4,
    LV_HANDLE TYPE SZAD_FIELD-HANDLE.
  DATA: LV_RETURNCODE TYPE AD_RETCODE.
  SELECT *
     FROM ADR6
     INTO TABLE @DATA(LT_ADR6)
     WHERE ADDRNUMBER = @LV_ADDR_NUM.
  IF G_MODE = '1'.
    LV_INDEX += 1.
    ADSMTP-CONSNUMBER = LV_INDEX.
  ENDIF.

  ADSMTP-SMTP_ADDR = GS_DATA-SMTP_ADDR.
*  ADSMTP-SMTP_SRCH = GS_DATA-SMTP_SRCH.
*  ADSMTP-COUNTRY    = GS_DATA-LAND1.
  ADSMTP-FLGDEFAULT = 'X'.
  ADSMTP-HOME_FLAG = 'X'.
  ADSMTP-R3_USER    = '1'.
  IF G_MODE = '1'.
    READ TABLE LT_ADR6 TRANSPORTING NO FIELDS
       WITH KEY ADDRNUMBER = LV_ADDR_NUM.
    IF SY-SUBRC IS INITIAL.
      ADSMTP-UPDATEFLAG = 'U'.
      IF  GS_DATA-SMTP_ADDR IS INITIAL.
        ADSMTP-UPDATEFLAG = 'D'.
      ENDIF.
    ELSEIF GS_DATA-SMTP_ADDR IS NOT INITIAL.
      ADSMTP-UPDATEFLAG = 'I'.
    ENDIF.
  ELSEIF GS_DATA-SMTP_ADDR IS NOT INITIAL.
    ADSMTP-UPDATEFLAG = 'I'.
    LV_HANDLE = 'Address'.
  ENDIF.
*  ADTEL-TEL_EXTENS = GS_DATA-TEL_EXTENS.
  APPEND ADSMTP.

  LV_TABLE = 'ADSMTP'.
  CALL FUNCTION 'ADDR_COMM_MAINTAIN'
    EXPORTING
      ADDRESS_HANDLE    = LV_HANDLE
      ADDRESS_NUMBER    = LV_ADDR_NUM
*     DATE_FROM         = '00010101'
*     LANGUAGE          = SY-LANGU
      TABLE_TYPE        = LV_TABLE
*     SUBSTITUTE_ALL_COMM_DATA             = ' '
*     ACCEPT_TELNR_CALL = ' '
*     CONSIDER_CONSNUMBER_FOR_INSERT       = ' '
*     CHECK_ADDRESS     = 'X'
*     IV_TIME_DEPENDENCE                   = ' '
*     IV_CONSIDER_ADRCOMC_FOR_INSERT       = 'X'
*     BLK_EXCPT         =
    IMPORTING
      RETURNCODE        = LV_RETURNCODE
    TABLES
      COMM_TABLE        = ADSMTP
      ERROR_TABLE       = E_TABLE
*     COMM_TABLE_OUT    =
*     IT_USAGE          =
*     IT_USAGE_UUID     =
*     ET_USAGE_OUT      =
*     ET_USAGE_UUID_OUT =
*     ET_CREATED_USAGE_UUID                =
    EXCEPTIONS
      PARAMETER_ERROR   = 1
      ADDRESS_NOT_EXIST = 2
      INTERNAL_ERROR    = 3
      ADDRESS_BLOCKED   = 4
      OTHERS            = 5.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.
